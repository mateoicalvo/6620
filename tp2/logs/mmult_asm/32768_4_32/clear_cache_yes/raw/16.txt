--------------------------------------------------------------------------------
I1 cache:         32768 B, 32 B, 4-way associative
D1 cache:         32768 B, 32 B, 4-way associative
LL cache:         524288 B, 32 B, 8-way associative
Command:          bin/benchmark
Data file:        cachegrind.out.1366
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   /root/tp2/asm/mmult.S
Auto-annotation:  off

--------------------------------------------------------------------------------
Ir          I1mr  ILmr  Dr         D1mr  DLmr  Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
148,004,431 2,459 2,441 52,705,421 3,702 3,084 21,111,793 1,311,590 1,311,538  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr         D1mr  DLmr Dw         D1mw      DLmw       file:function
--------------------------------------------------------------------------------
146,800,874   32   31 52,428,873    10    7 20,971,539 1,310,721 1,310,720  /root/tp2/src/benchmark.c:benchmark_correr
    194,541  120  120     49,714     8    8     18,234        27        27  /build/glibc-qeih7b/glibc-2.24/stdio-common/printf_fp.c:__printf_fp_l

--------------------------------------------------------------------------------
-- User-annotated source: /root/tp2/asm/mmult.S
--------------------------------------------------------------------------------
Ir    I1mr ILmr Dr    D1mr DLmr Dw  D1mw DLmw 

-- line 5 ----------------------------------------
    .    .    .     .    .    .   .    .    .      .align 2
    .    .    .     .    .    .   .    .    .      .set oddspreg
    .    .    .     .    .    .   .    .    .      .globl mmult
    .    .    .     .    .    .   .    .    .      .ent mmult
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  mmult:
    .    .    .     .    .    .   .    .    .      .frame fp, 8, ra
    .    .    .     .    .    .   .    .    .      .set noreorder
    3    1    1     0    0    0   0    0    0      .cpload t9
    .    .    .     .    .    .   .    .    .      .set reorder
    .    .    .     .    .    .   .    .    .  
    1    0    0     0    0    0   0    0    0      subu sp, sp, 8
    1    1    1     0    0    0   1    0    0      .cprestore 0
    1    0    0     0    0    0   1    0    0  	sw fp, 4(sp)
    1    0    0     0    0    0   0    0    0      move fp, sp
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .      #En el ABA de la caller
    1    0    0     0    0    0   1    0    0      sw a0, 8(fp)  #matriz_t* A esta en fp+8
    1    0    0     0    0    0   1    0    0  	sw a1, 12(fp) #matriz_t* B esta en fp+12
    1    0    0     0    0    0   1    0    0  	sw a2, 16(fp) #matriz_t* C esta en fp+16
    1    0    0     0    0    0   1    0    0      sw a3, 20(fp) #dimension (n) esta en fp+20
    .    .    .     .    .    .   .    .    .      
    1    0    0     0    0    0   0    0    0      li t3, 0   #t3 = 0 (fila)
    .    .    .     .    .    .   .    .    .  iter_filas:
   34    1    1     0    0    0   0    0    0      beq t3, a3, salir #fila == n?
   16    0    0     0    0    0   0    0    0      li t4, 0           #t4 = 0 (columna)
    .    .    .     .    .    .   .    .    .      iter_columnas:
  544    0    0     0    0    0   0    0    0          beq t4, a3, inc_fila    #columna == n?
  256    0    0     0    0    0   0    0    0          li t5, 0                   #t5 = 0 (i)
  256    0    0     0    0    0   0    0    0          mtc1 zero, $f6 #f6 vale cero, aca guardo sumas parciales
  256    0    0     0    0    0   0    0    0          mtc1 zero, $f7 #f7 seteado a cero porque trabajo con doubles
    .    .    .     .    .    .   .    .    .          iter_n:
8,704    1    1     0    0    0   0    0    0              beq t5, a3, inc_columna #i == n? -> columna ++
4,096    0    0     0    0    0   0    0    0              mul t6, a3, t3  #t6 = fila * n
4,096    0    0     0    0    0   0    0    0              add t6, t6, t5  #t6 es fila*n + i, t6 es indice de A
    .    .    .     .    .    .   .    .    .  
4,096    0    0     0    0    0   0    0    0              sll t0, t6, 3   #t0 = t6 * 8
4,096    0    0     0    0    0   0    0    0              add t0, a0, t0  #t0 tiene la direccion de A[t6]
4,096    0    0 4,096   64   64   0    0    0              ldc1 $f0, 0(t0) #f0 tiene el elemento de A
    .    .    .     .    .    .   .    .    .  
4,096    0    0     0    0    0   0    0    0              mul t7, t5, a3  #t7 = i * n
4,096    1    1     0    0    0   0    0    0              add t7, t7, t4  #t7 es i*n + columna, t7 es indice de B
    .    .    .     .    .    .   .    .    .  
4,096    0    0     0    0    0   0    0    0              sll t1, t7, 3   #t1 = t7 *8
4,096    0    0     0    0    0   0    0    0              add t1, a1, t1  #t1 tiene la direccion de B[t6]
4,096    0    0 4,096   64   64   0    0    0              ldc1 $f2, 0(t1) #f2 tiene el elemento de B
    .    .    .     .    .    .   .    .    .  
4,096    0    0     0    0    0   0    0    0              madd.d $f6, $f6, $f2, $f0 #f6 tiene A[i, j]*B[j, i] + A[i-1, j-1]*B[j-1, i-1] + ...
    .    .    .     .    .    .   .    .    .              
4,096    0    0     0    0    0   0    0    0              addi t5, t5, 1
8,192    0    0     0    0    0   0    0    0              j iter_n
    .    .    .     .    .    .   .    .    .          inc_columna:
    .    .    .     .    .    .   .    .    .          #Luego de iterar la fila de A y la columna de B, guardo en
    .    .    .     .    .    .   .    .    .          # C[ij] la suma acumulada.
  256    1    1     0    0    0   0    0    0          mul t8, t3, a3  #t8 = fila * n
  256    0    0     0    0    0   0    0    0          add t8, t8, t4  #t8 es fila*n + columna es indice de C
  256    0    0     0    0    0   0    0    0          sll t2, t8, 3   #t2 = t8*8
  256    0    0     0    0    0   0    0    0          add t2, a2, t2  #t2 tiene la direccion de C[t8]
  256    0    0     0    0    0 256   65   65          sdc1 $f6, 0(t2)
  256    0    0     0    0    0   0    0    0          addi t4, t4, 1
  512    0    0     0    0    0   0    0    0          j iter_columnas
    .    .    .     .    .    .   .    .    .      inc_fila:
   16    1    1     0    0    0   0    0    0      addi t3, t3, 1
   32    0    0     0    0    0   0    0    0      j iter_filas
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  salir:
    1    0    0     1    0    0   0    0    0      lw fp, 4(sp)
    1    0    0     0    0    0   0    0    0      addiu sp,sp,8
    2    0    0     0    0    0   0    0    0      jr ra
    .    .    .     .    .    .   .    .    .      
    .    .    .     .    .    .   .    .    .      .end mmult

--------------------------------------------------------------------------------
Ir     I1mr ILmr Dr    D1mr DLmr Dw  D1mw DLmw 
--------------------------------------------------------------------------------
69,522    7    7 8,193  128  128 262   65   65  events annotated

